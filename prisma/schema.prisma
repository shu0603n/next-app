generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model attendance {
  employee_id Int
  date        DateTime  @db.Date
  start_time  DateTime? @db.Time(6)
  end_time    DateTime? @db.Time(6)
  location    String?
  approve     Boolean?  @default(false)
  employee    employee  @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([employee_id, date])
}

model client {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  name_k           String?            @db.VarChar(255)
  address          String?            @db.VarChar(255)
  phone            String?            @db.VarChar(255)
  email            String?            @db.VarChar(255)
  postal_code      String?            @db.VarChar(255)
  remarks          String?            @db.VarChar(255)
  client_history   client_history[]
  employee_project employee_project[]
  invoice          invoice[]
  project          project[]
}

model contract {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(30)
  project project[]
}

model employee {
  id               Int                @id @default(autoincrement())
  sei              String             @db.VarChar(255)
  mei              String             @db.VarChar(255)
  sei_k            String?            @db.VarChar(255)
  mei_k            String?            @db.VarChar(255)
  gender           String?            @db.VarChar(255)
  birthday         DateTime?          @db.Date
  job_category_id  Int?
  client_id        Int?
  project_id       Int?
  address          String?            @db.VarChar(255)
  joining_date     DateTime?          @db.Date
  retirement_date  DateTime?          @db.Date
  phone_number     String?            @db.VarChar(255)
  email            String?            @unique(map: "unique_email") @db.VarChar(255)
  postal_code      String?            @db.VarChar(8)
  remarks          String?
  position_id      Int?
  employment_id    Int?
  password         String?            @db.VarChar(255)
  avatar           String?
  department_id    Int?
  attendance       attendance[]
  client_history   client_history[]
  employment       employment?        @relation(fields: [employment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job_category     job_category?      @relation(fields: [job_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  position         position?          @relation(fields: [position_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department       department?        @relation(fields: [department_id], references: [id], map: "fk_department")
  employee_project employee_project[]
  invoice          invoice[]
  mail_list        mail_list[]
  project          project[]
  roles            roles?
}

model employee_project {
  id                         Int                          @id(map: "employee_skills_pkey") @default(autoincrement())
  employee_id                Int
  start_date                 DateTime?                    @db.Date
  end_date                   DateTime?                    @db.Date
  project_title              String?                      @db.VarChar(255)
  description                String?                      @db.VarChar(2000)
  people_number              Int?
  client_id                  Int?
  project_position_id        Int?
  client                     client?                      @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employee_skills_client_id_fkey")
  employee                   employee                     @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employee_skills_employee_id_fkey")
  project_position           project_position?            @relation(fields: [project_position_id], references: [id], onUpdate: NoAction, map: "fk_project_position")
  employee_project_processes employee_project_processes[]
  employee_project_skills    employee_project_skills[]
}

model employment {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(30)
  employee employee[]
}

model invoice {
  id             Int       @id @default(autoincrement())
  invoice_date   DateTime? @db.Date
  contract_price Int
  invoice_amount Int
  start_date     DateTime? @db.Date
  end_date       DateTime? @db.Date
  employee_id    Int
  client_id      Int
  project_id     Int
  working_hours  Float?
  payment_flg    Boolean?  @default(false)
  client         client    @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee       employee  @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project        project   @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model job_category {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(30)
  employee employee[]
}

model position {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(30)
  employee employee[]
}

model process {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(30)
  employee_project_processes employee_project_processes[]
  project_process            project_process[]
}

model employee_project_processes {
  id                  Int               @id(map: "process_used_pkey") @default(autoincrement())
  employee_project_id Int?
  process_id          Int?
  employee_project    employee_project? @relation(fields: [employee_project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "process_used_employee_skills_id_fkey")
  process             process?          @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "process_used_process_id_fkey")
}

model project {
  id                           Int               @id(map: "example_table_pkey") @default(autoincrement())
  hp_posting_flag              Boolean           @default(false)
  client_id                    Int?
  contract_id                  Int?
  working_postal_code          String?           @db.VarChar(255)
  working_address              String?           @db.VarChar(255)
  holiday                      String?           @db.VarChar(255)
  project_title                String?           @db.VarChar(255)
  description                  String?           @db.VarChar(255)
  working_start_time           String?           @db.VarChar(10)
  working_end_time             String?           @db.VarChar(10)
  start_date                   DateTime?         @db.Date
  end_date                     DateTime?         @db.Date
  dispatch_source              String?           @default("株式会社トライブ") @db.VarChar(255)
  fertilizer_type              String?           @db.VarChar(255)
  training_schedule            String?           @db.VarChar(255)
  trial_period_duration        String?           @db.VarChar(255)
  training_memo                String?           @db.VarChar(255)
  contract_period              String?           @db.VarChar(255)
  working_days_count           String?           @db.VarChar(255)
  working_days_list            String?           @db.VarChar(255)
  working_hours_per_day        String[]          @default([]) @db.VarChar(255)
  work_notes                   String?           @db.VarChar(255)
  price_type                   Int?
  transportation_expenses      String?           @db.VarChar(255)
  overtime_hours               String?           @db.VarChar(255)
  welfare_programs             String?           @db.VarChar(255)
  work_environment_description String?           @db.VarChar(255)
  dress_code                   String?           @db.VarChar(255)
  gender_ratio                 String?           @db.VarChar(255)
  environmental_notes          String?           @db.VarChar(255)
  special_notes                String?           @db.VarChar(255)
  hr_requirements              String?           @db.VarChar(255)
  gender_requirements          String?           @db.VarChar(255)
  age_requirements             String?           @db.VarChar(255)
  recruitment_count            String?           @db.VarChar(255)
  employee_id                  Int?
  price                        Int?
  invoice                      invoice[]
  client                       client?           @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "example_table_client_id_fkey")
  contract                     contract?         @relation(fields: [contract_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "example_table_contract_id_fkey")
  employee                     employee?         @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project_process              project_process[]
  project_skills               project_skills[]
}

model project_process {
  id         Int      @id @default(autoincrement())
  project_id Int?
  process_id Int?
  process    process? @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project    project? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model project_skills {
  id         Int      @id @default(autoincrement())
  project_id Int?
  skill_id   Int?
  project    project? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skill      skill?   @relation(fields: [skill_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model project_type {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(30)
}

model skill {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(30)
  technic_id              Int?
  candidate_flag          Boolean?                  @default(false)
  employee_project_skills employee_project_skills[]
  project_skills          project_skills[]
  technic                 technic?                  @relation(fields: [technic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model employee_project_skills {
  id                  Int               @id(map: "skills_used_pkey") @default(autoincrement())
  employee_project_id Int?
  skill_id            Int?
  employee_project    employee_project? @relation(fields: [employee_project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "skills_used_employee_skills_id_fkey")
  skill               skill?            @relation(fields: [skill_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "skills_used_skill_id_fkey")
}

model technic {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(30)
  skill skill[]
}

model working {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(30)
}

model your_table_name {
  id             Int       @id @default(autoincrement())
  invoice_date   DateTime? @db.Date
  contract_price Decimal   @db.Decimal
  invoice_amount Decimal   @db.Decimal
  start_date     DateTime? @db.Date
  end_date       DateTime? @db.Date
  employee_id    Decimal   @db.Decimal
  client_id      Decimal   @db.Decimal
  project_id     Decimal   @db.Decimal
  working_hours  Float?
  payment_flg    Boolean?  @default(false)
}

model mail_account {
  id               Int                @id @default(autoincrement())
  name             String?            @db.VarChar(255)
  user             String?            @db.VarChar(255)
  pass             String?            @db.VarChar(255)
  use              Boolean?           @default(true)
  mail_destination mail_destination[]
  mail_send_logs   mail_send_logs[]
}

model accounts {
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  oauth_token         String?
  oauth_token_secret  String?
  user_id             Int
  id                  Int     @id @default(autoincrement())
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model sessions {
  id            Int      @id @default(autoincrement())
  session_token String   @unique
  user_id       Int
  expires       DateTime
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users {
  name           String?
  email          String     @unique
  email_verified DateTime?
  image          String?
  created_at     DateTime   @default(now())
  updated_at     DateTime
  id             Int        @id @default(autoincrement())
  accounts       accounts[]
  sessions       sessions[]
}

model verificationtokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model project_position {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(30)
  description      String?            @db.VarChar(255)
  employee_project employee_project[]
}

model client_history {
  id                 Int              @id(map: "support_histories_pkey") @default(autoincrement())
  client_id          Int
  time               DateTime         @default(now()) @db.Timestamptz(6)
  name               String           @db.VarChar(100)
  gender             String?          @db.Char(1)
  remarks            String?
  client_position_id Int?
  age                String?          @db.VarChar(20)
  employee_id        Int?
  client             client           @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_client")
  client_position    client_position? @relation(fields: [client_position_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_client_position")
  employee           employee?        @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee")
}

model client_position {
  id             Int              @id(map: "client_positions_pkey") @default(autoincrement())
  name           String           @db.VarChar(30)
  client_history client_history[]
}

model roles {
  employee_id   Int      @id(map: "pk_employee_id")
  super_role    Boolean? @default(false)
  system_role   Boolean? @default(false)
  employee_view Boolean? @default(false)
  client_view   Boolean? @default(false)
  project_view  Boolean? @default(false)
  employee_edit Boolean? @default(false)
  client_edit   Boolean? @default(false)
  project_edit  Boolean? @default(false)
  employee      employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, map: "fk_employee")
}

model staff {
  id               Int                @id
  birthday         DateTime?          @db.Date
  name             String?            @db.VarChar(255)
  staff_status_id  Int?
  mail             String?            @db.VarChar(255)
  import_status_id Int?
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @default(now()) @db.Timestamp(6)
  mail_destination mail_destination[]
  mail_send_logs   mail_send_logs[]
  import_status    import_status?     @relation(fields: [import_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_import_status")
  staff_status     staff_status?      @relation(fields: [staff_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_staff_status")
}

model staff_status {
  id    Int     @id
  name  String  @db.VarChar(30)
  staff staff[]
}

model import_status {
  id    Int     @id
  name  String  @db.VarChar(30)
  staff staff[]
}

model department {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(50)
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  updated_at DateTime?  @default(now()) @db.Timestamp(6)
  employee   employee[]
}

model mail_destination {
  mail_list_id    Int
  staff_id        Int
  create_at       DateTime?     @default(now()) @db.Timestamp(6)
  update_at       DateTime?     @default(now()) @db.Timestamp(6)
  id              Int           @id @default(autoincrement())
  mail_account_id Int?
  log             String?
  complete_flg    Int?
  mail_account    mail_account? @relation(fields: [mail_account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mail_account")
  mail_list       mail_list     @relation(fields: [mail_list_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_mail_list")
  staff           staff         @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_staff")
}

model mail_list {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(255)
  main_text        String?
  create_at        DateTime?          @default(now()) @db.Timestamp(6)
  update_at        DateTime?          @default(now()) @db.Timestamp(6)
  employee_id      Int?
  mail_destination mail_destination[]
  employee         employee?          @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_employee")
  mail_send_logs   mail_send_logs[]
}

model send_mail_status {
  id        Int       @id @default(autoincrement())
  status    String    @db.VarChar(255)
  error_log String?
  start_at  DateTime? @default(now()) @db.Timestamp(6)
  end_at    DateTime? @db.Timestamp(6)
}

model mail_send_logs {
  id              Int          @id @default(autoincrement())
  mail_list_id    Int
  mail_account_id Int
  status          Int          @db.SmallInt
  log             String?
  sent_at         DateTime?    @db.Timestamp(6)
  staff_id        Int?
  mail_account    mail_account @relation(fields: [mail_account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_mail_account")
  mail_list       mail_list    @relation(fields: [mail_list_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_mail_list")
  staff           staff?       @relation(fields: [staff_id], references: [id], onUpdate: NoAction)
}
