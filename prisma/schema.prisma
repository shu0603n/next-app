generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model attendance {
  employee_id Int
  date        DateTime  @db.Date
  start_time  DateTime? @db.Time(6)
  end_time    DateTime? @db.Time(6)
  location    String?
  approve     Boolean?  @default(false)
  employee    employee  @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([employee_id, date])
}

model client {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  name_k          String?           @db.VarChar(255)
  address         String?           @db.VarChar(255)
  phone           String?           @db.VarChar(255)
  email           String?           @db.VarChar(255)
  postal_code     String?           @db.VarChar(255)
  remarks         String?           @db.VarChar(255)
  employee_skills employee_skills[]
  invoice         invoice[]
  project         project[]
}

model contract {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(30)
  project project[]
}

model employee {
  id              Int               @id @default(autoincrement())
  sei             String            @db.VarChar(255)
  mei             String            @db.VarChar(255)
  sei_k           String?           @db.VarChar(255)
  mei_k           String?           @db.VarChar(255)
  gender          String?           @db.VarChar(255)
  birthday        DateTime?         @db.Date
  job_category_id Int?
  client_id       Int?
  project_id      Int?
  address         String?           @db.VarChar(255)
  joining_date    DateTime?         @db.Date
  retirement_date DateTime?         @db.Date
  phone_number    String?           @db.VarChar(255)
  email           String?           @db.VarChar(255)
  postal_code     String?           @db.VarChar(8)
  remarks         String?           @db.VarChar(255)
  position_id     Int?
  employment_id   Int?
  attendance      attendance[]
  employment      employment?       @relation(fields: [employment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job_category    job_category?     @relation(fields: [job_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  position        position?         @relation(fields: [position_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee_skills employee_skills[]
  invoice         invoice[]
}

model employee_skills {
  id            Int            @id @default(autoincrement())
  employee_id   Int
  start_date    DateTime?      @db.Date
  end_date      DateTime?      @db.Date
  project_title String?        @db.VarChar(255)
  description   String?        @db.VarChar(2000)
  people_number Int?
  client_id     Int?
  client        client?        @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee      employee       @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  process_used  process_used[]
  skills_used   skills_used[]
}

model employment {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(30)
  employee employee[]
}

model invoice {
  id             Int       @id @default(autoincrement())
  invoice_date   DateTime? @db.Date
  contract_price Int
  invoice_amount Int
  start_date     DateTime? @db.Date
  end_date       DateTime? @db.Date
  employee_id    Int
  client_id      Int
  project_id     Int
  working_hours  Float?
  payment_flg    Boolean?  @default(false)
  client         client    @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee       employee  @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project        project   @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model job_category {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(30)
  employee employee[]
}

model position {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(30)
  employee employee[]
}

model process {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(30)
  process_used    process_used[]
  project_process project_process[]
}

model process_used {
  id              Int              @id @default(autoincrement())
  project_id      Int?
  process_id      Int?
  employee_skills employee_skills? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "process_used_employee_skills_id_fkey")
  process         process?         @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model project {
  id                  Int               @id(map: "example_table_pkey") @default(autoincrement())
  hp_posting_flag     Boolean           @default(false)
  client_id           Int?
  contract_id         Int?
  working_postal_code String?           @db.VarChar(255)
  working_address     String?           @db.VarChar(255)
  holiday             String?           @db.VarChar(255)
  project_title       String?           @db.VarChar(255)
  description         String?           @db.VarChar(255)
  working_start_time  String?           @db.VarChar(10)
  working_end_time    String?           @db.VarChar(10)
  start_date          DateTime?         @db.Date
  end_date            DateTime?         @db.Date
  price               String?           @db.VarChar(40)
  invoice             invoice[]
  client              client?           @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "example_table_client_id_fkey")
  contract            contract?         @relation(fields: [contract_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "example_table_contract_id_fkey")
  project_process     project_process[]
  project_skills      project_skills[]
}

model project_process {
  id         Int      @id @default(autoincrement())
  project_id Int?
  process_id Int?
  process    process? @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project    project? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model project_skills {
  id         Int      @id @default(autoincrement())
  project_id Int?
  skill_id   Int?
  project    project? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skill      skill?   @relation(fields: [skill_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model project_type {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(30)
}

model skill {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(30)
  technic_id     Int?
  candidate_flag Boolean?         @default(false)
  project_skills project_skills[]
  technic        technic?         @relation(fields: [technic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skills_used    skills_used[]
}

model skills_used {
  id                 Int              @id @default(autoincrement())
  employee_skills_id Int?
  skill_id           Int?
  employee_skills    employee_skills? @relation(fields: [employee_skills_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skill              skill?           @relation(fields: [skill_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model technic {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(30)
  skill skill[]
}

model working {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(30)
}

model your_table_name {
  id             Int       @id @default(autoincrement())
  invoice_date   DateTime? @db.Date
  contract_price Decimal   @db.Decimal
  invoice_amount Decimal   @db.Decimal
  start_date     DateTime? @db.Date
  end_date       DateTime? @db.Date
  employee_id    Decimal   @db.Decimal
  client_id      Decimal   @db.Decimal
  project_id     Decimal   @db.Decimal
  working_hours  Float?
  payment_flg    Boolean?  @default(false)
}
